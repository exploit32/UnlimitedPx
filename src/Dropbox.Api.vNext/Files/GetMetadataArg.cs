// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The get metadata arg object</para>
    /// </summary>
    public class GetMetadataArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GetMetadataArg> Encoder = new GetMetadataArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GetMetadataArg> Decoder = new GetMetadataArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GetMetadataArg" /> class.</para>
        /// </summary>
        /// <param name="path">The path of a file or folder on Dropbox</param>
        /// <param name="includeMediaInfo">If true, :field:'FileMetadata.media_info' is set for
        /// photo and video.</param>
        public GetMetadataArg(string path,
                              bool includeMediaInfo = false)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }
            else if (!re.Regex.IsMatch(path, @"\A(?:((/|id:).*)|(rev:[0-9a-f]{9,}))\z"))
            {
                throw new sys.ArgumentOutOfRangeException("path");
            }

            this.Path = path;
            this.IncludeMediaInfo = includeMediaInfo;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GetMetadataArg" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public GetMetadataArg()
        {
            this.IncludeMediaInfo = false;
        }

        /// <summary>
        /// <para>The path of a file or folder on Dropbox</para>
        /// </summary>
        public string Path { get; protected set; }

        /// <summary>
        /// <para>If true, :field:'FileMetadata.media_info' is set for photo and video.</para>
        /// </summary>
        public bool IncludeMediaInfo { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GetMetadataArg" />.</para>
        /// </summary>
        private class GetMetadataArgEncoder : enc.StructEncoder<GetMetadataArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GetMetadataArg value, enc.IJsonWriter writer)
            {
                WriteProperty("path", value.Path, writer, enc.StringEncoder.Instance);
                WriteProperty("include_media_info", value.IncludeMediaInfo, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GetMetadataArg" />.</para>
        /// </summary>
        private class GetMetadataArgDecoder : enc.StructDecoder<GetMetadataArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GetMetadataArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GetMetadataArg Create()
            {
                return new GetMetadataArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(GetMetadataArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "path":
                        value.Path = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "include_media_info":
                        value.IncludeMediaInfo = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
