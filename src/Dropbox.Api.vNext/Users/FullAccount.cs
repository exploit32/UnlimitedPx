// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Users
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Detailed information about the current user's account.</para>
    /// </summary>
    /// <seealso cref="Dropbox.Api.Users.Account" />
    public class FullAccount : Account
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FullAccount> Encoder = new FullAccountEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FullAccount> Decoder = new FullAccountDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FullAccount" /> class.</para>
        /// </summary>
        /// <param name="accountId">The user's unique Dropbox ID.</param>
        /// <param name="name">Details of a user's name.</param>
        /// <param name="email">The user's e-mail address. Do not rely on this without checking
        /// the <paramref name="emailVerified" /> field. Even then, it's possible that the user
        /// has since lost access to their e-mail.</param>
        /// <param name="emailVerified">Whether the user has verified their e-mail
        /// address.</param>
        /// <param name="locale">The language that the user specified. Locale tags will be <a
        /// href="http://en.wikipedia.org/wiki/IETF_language_tag">IETF language
        /// tags</a>.</param>
        /// <param name="referralLink">The user's <a
        /// href="https://www.dropbox.com/referrals">referral link</a>.</param>
        /// <param name="isPaired">Whether the user has a personal and work account. If the
        /// current account is personal, then <paramref name="team" /> will always be
        /// <c>null</c>, but <paramref name="isPaired" /> will indicate if a work account is
        /// linked.</param>
        /// <param name="accountType">What type of account this user has.</param>
        /// <param name="country">The user's two-letter country code, if available. Country
        /// codes are based on <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO
        /// 3166-1</a>.</param>
        /// <param name="team">If this account is a member of a team, information about that
        /// team.</param>
        public FullAccount(string accountId,
                           Name name,
                           string email,
                           bool emailVerified,
                           string locale,
                           string referralLink,
                           bool isPaired,
                           AccountType accountType,
                           string country = null,
                           Team team = null)
            : base(accountId, name)
        {
            if (email == null)
            {
                throw new sys.ArgumentNullException("email");
            }

            if (locale == null)
            {
                throw new sys.ArgumentNullException("locale");
            }
            else if (locale.Length < 2)
            {
                throw new sys.ArgumentOutOfRangeException("locale");
            }

            if (referralLink == null)
            {
                throw new sys.ArgumentNullException("referralLink");
            }

            if (accountType == null)
            {
                throw new sys.ArgumentNullException("accountType");
            }

            if (country != null && (country.Length < 2 || country.Length > 2))
            {
                throw new sys.ArgumentOutOfRangeException("country");
            }

            this.Email = email;
            this.EmailVerified = emailVerified;
            this.Locale = locale;
            this.ReferralLink = referralLink;
            this.IsPaired = isPaired;
            this.AccountType = accountType;
            this.Country = country;
            this.Team = team;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FullAccount" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public FullAccount()
        {
        }

        /// <summary>
        /// <para>The user's e-mail address. Do not rely on this without checking the <see
        /// cref="EmailVerified" /> field. Even then, it's possible that the user has since
        /// lost access to their e-mail.</para>
        /// </summary>
        public string Email { get; protected set; }

        /// <summary>
        /// <para>Whether the user has verified their e-mail address.</para>
        /// </summary>
        public bool EmailVerified { get; protected set; }

        /// <summary>
        /// <para>The language that the user specified. Locale tags will be <a
        /// href="http://en.wikipedia.org/wiki/IETF_language_tag">IETF language
        /// tags</a>.</para>
        /// </summary>
        public string Locale { get; protected set; }

        /// <summary>
        /// <para>The user's <a href="https://www.dropbox.com/referrals">referral
        /// link</a>.</para>
        /// </summary>
        public string ReferralLink { get; protected set; }

        /// <summary>
        /// <para>Whether the user has a personal and work account. If the current account is
        /// personal, then <see cref="Team" /> will always be <c>null</c>, but <see
        /// cref="IsPaired" /> will indicate if a work account is linked.</para>
        /// </summary>
        public bool IsPaired { get; protected set; }

        /// <summary>
        /// <para>What type of account this user has.</para>
        /// </summary>
        public AccountType AccountType { get; protected set; }

        /// <summary>
        /// <para>The user's two-letter country code, if available. Country codes are based on
        /// <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1</a>.</para>
        /// </summary>
        public string Country { get; protected set; }

        /// <summary>
        /// <para>If this account is a member of a team, information about that team.</para>
        /// </summary>
        public Team Team { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FullAccount" />.</para>
        /// </summary>
        private class FullAccountEncoder : enc.StructEncoder<FullAccount>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FullAccount value, enc.IJsonWriter writer)
            {
                WriteProperty("account_id", value.AccountId, writer, enc.StringEncoder.Instance);
                WriteProperty("name", value.Name, writer, Dropbox.Api.Users.Name.Encoder);
                WriteProperty("email", value.Email, writer, enc.StringEncoder.Instance);
                WriteProperty("email_verified", value.EmailVerified, writer, enc.BooleanEncoder.Instance);
                WriteProperty("locale", value.Locale, writer, enc.StringEncoder.Instance);
                WriteProperty("referral_link", value.ReferralLink, writer, enc.StringEncoder.Instance);
                WriteProperty("is_paired", value.IsPaired, writer, enc.BooleanEncoder.Instance);
                WriteProperty("account_type", value.AccountType, writer, Dropbox.Api.Users.AccountType.Encoder);
                if (value.Country != null)
                {
                    WriteProperty("country", value.Country, writer, enc.StringEncoder.Instance);
                }
                if (value.Team != null)
                {
                    WriteProperty("team", value.Team, writer, Dropbox.Api.Users.Team.Encoder);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FullAccount" />.</para>
        /// </summary>
        private class FullAccountDecoder : enc.StructDecoder<FullAccount>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FullAccount" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FullAccount Create()
            {
                return new FullAccount();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(FullAccount value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "account_id":
                        value.AccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "name":
                        value.Name = Dropbox.Api.Users.Name.Decoder.Decode(reader);
                        break;
                    case "email":
                        value.Email = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email_verified":
                        value.EmailVerified = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "locale":
                        value.Locale = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "referral_link":
                        value.ReferralLink = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "is_paired":
                        value.IsPaired = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "account_type":
                        value.AccountType = Dropbox.Api.Users.AccountType.Decoder.Decode(reader);
                        break;
                    case "country":
                        value.Country = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "team":
                        value.Team = Dropbox.Api.Users.Team.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
